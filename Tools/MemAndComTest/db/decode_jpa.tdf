--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 7.2 cbx_cycloneii 2007:06:13:15:47:32:SJ cbx_lpm_add_sub 2007:08:06:16:01:34:SJ cbx_lpm_compare 2007:06:21:15:54:06:SJ cbx_lpm_decode 2007:03:12:19:01:52:SJ cbx_mgl 2007:08:03:15:48:12:SJ cbx_stratix 2007:05:02:16:27:14:SJ cbx_stratixii 2007:06:28:17:26:26:SJ  VERSION_END


-- Copyright (C) 1991-2007 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_jpa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode597w[1..0]	: WIRE;
	w_anode606w[3..0]	: WIRE;
	w_anode623w[3..0]	: WIRE;
	w_anode633w[3..0]	: WIRE;
	w_anode643w[3..0]	: WIRE;
	w_anode653w[3..0]	: WIRE;
	w_anode663w[3..0]	: WIRE;
	w_anode673w[3..0]	: WIRE;
	w_anode683w[3..0]	: WIRE;
	w_anode695w[1..0]	: WIRE;
	w_anode702w[3..0]	: WIRE;
	w_anode713w[3..0]	: WIRE;
	w_anode723w[3..0]	: WIRE;
	w_anode733w[3..0]	: WIRE;
	w_anode743w[3..0]	: WIRE;
	w_anode753w[3..0]	: WIRE;
	w_anode763w[3..0]	: WIRE;
	w_anode773w[3..0]	: WIRE;
	w_data595w[2..0]	: WIRE;
	w_decout604w	: WIRE;
	w_decout700w	: WIRE;
	w_eq605w[7..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode773w[3..3], w_anode763w[3..3], w_anode753w[3..3], w_anode743w[3..3], w_anode733w[3..3], w_anode723w[3..3], w_anode713w[3..3], w_anode702w[3..3]), ( w_anode683w[3..3], w_anode673w[3..3], w_anode663w[3..3], w_anode653w[3..3], w_anode643w[3..3], w_anode633w[3..3], w_anode623w[3..3], w_anode606w[3..3]));
	w_anode597w[] = ( (w_anode597w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode606w[] = ( (w_anode606w[2..2] & (! w_data595w[2..2])), (w_anode606w[1..1] & (! w_data595w[1..1])), (w_anode606w[0..0] & (! w_data595w[0..0])), w_anode597w[1..1]);
	w_anode623w[] = ( (w_anode623w[2..2] & (! w_data595w[2..2])), (w_anode623w[1..1] & (! w_data595w[1..1])), (w_anode623w[0..0] & w_data595w[0..0]), w_anode597w[1..1]);
	w_anode633w[] = ( (w_anode633w[2..2] & (! w_data595w[2..2])), (w_anode633w[1..1] & w_data595w[1..1]), (w_anode633w[0..0] & (! w_data595w[0..0])), w_anode597w[1..1]);
	w_anode643w[] = ( (w_anode643w[2..2] & (! w_data595w[2..2])), (w_anode643w[1..1] & w_data595w[1..1]), (w_anode643w[0..0] & w_data595w[0..0]), w_anode597w[1..1]);
	w_anode653w[] = ( (w_anode653w[2..2] & w_data595w[2..2]), (w_anode653w[1..1] & (! w_data595w[1..1])), (w_anode653w[0..0] & (! w_data595w[0..0])), w_anode597w[1..1]);
	w_anode663w[] = ( (w_anode663w[2..2] & w_data595w[2..2]), (w_anode663w[1..1] & (! w_data595w[1..1])), (w_anode663w[0..0] & w_data595w[0..0]), w_anode597w[1..1]);
	w_anode673w[] = ( (w_anode673w[2..2] & w_data595w[2..2]), (w_anode673w[1..1] & w_data595w[1..1]), (w_anode673w[0..0] & (! w_data595w[0..0])), w_anode597w[1..1]);
	w_anode683w[] = ( (w_anode683w[2..2] & w_data595w[2..2]), (w_anode683w[1..1] & w_data595w[1..1]), (w_anode683w[0..0] & w_data595w[0..0]), w_anode597w[1..1]);
	w_anode695w[] = ( (w_anode695w[0..0] & data_wire[3..3]), enable_wire);
	w_anode702w[] = ( (w_anode702w[2..2] & (! w_data595w[2..2])), (w_anode702w[1..1] & (! w_data595w[1..1])), (w_anode702w[0..0] & (! w_data595w[0..0])), w_anode695w[1..1]);
	w_anode713w[] = ( (w_anode713w[2..2] & (! w_data595w[2..2])), (w_anode713w[1..1] & (! w_data595w[1..1])), (w_anode713w[0..0] & w_data595w[0..0]), w_anode695w[1..1]);
	w_anode723w[] = ( (w_anode723w[2..2] & (! w_data595w[2..2])), (w_anode723w[1..1] & w_data595w[1..1]), (w_anode723w[0..0] & (! w_data595w[0..0])), w_anode695w[1..1]);
	w_anode733w[] = ( (w_anode733w[2..2] & (! w_data595w[2..2])), (w_anode733w[1..1] & w_data595w[1..1]), (w_anode733w[0..0] & w_data595w[0..0]), w_anode695w[1..1]);
	w_anode743w[] = ( (w_anode743w[2..2] & w_data595w[2..2]), (w_anode743w[1..1] & (! w_data595w[1..1])), (w_anode743w[0..0] & (! w_data595w[0..0])), w_anode695w[1..1]);
	w_anode753w[] = ( (w_anode753w[2..2] & w_data595w[2..2]), (w_anode753w[1..1] & (! w_data595w[1..1])), (w_anode753w[0..0] & w_data595w[0..0]), w_anode695w[1..1]);
	w_anode763w[] = ( (w_anode763w[2..2] & w_data595w[2..2]), (w_anode763w[1..1] & w_data595w[1..1]), (w_anode763w[0..0] & (! w_data595w[0..0])), w_anode695w[1..1]);
	w_anode773w[] = ( (w_anode773w[2..2] & w_data595w[2..2]), (w_anode773w[1..1] & w_data595w[1..1]), (w_anode773w[0..0] & w_data595w[0..0]), w_anode695w[1..1]);
	w_data595w[2..0] = data_wire[2..0];
	w_decout604w = w_anode597w[1..1];
	w_decout700w = w_anode695w[1..1];
	w_eq605w[] = ( w_anode683w[3..3], w_anode673w[3..3], w_anode663w[3..3], w_anode653w[3..3], w_anode643w[3..3], w_anode633w[3..3], w_anode623w[3..3], w_anode606w[3..3]);
END;
--VALID FILE
